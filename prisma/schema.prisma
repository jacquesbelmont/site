// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  posts     Post[]
  comments  Comment[]
  
  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  image       String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  views       Int      @default(0)
  readTime    String?
  seoTitle    String?
  seoDescription String?
  seoKeywords String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  tags        PostTag[]
  comments    Comment[]
  
  @@map("posts")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String @default("#3B82F6")
  
  posts       Post[]
  
  @@map("categories")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  color String @default("#6B7280")
  
  posts PostTag[]
  
  @@map("tags")
}

model PostTag {
  postId String
  tagId  String
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  
  @@map("comments")
}

model Member {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  plan        Plan     @default(BASIC)
  status      MemberStatus @default(ACTIVE)
  stripeId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime?
  
  @@map("members")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@map("contacts")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  youtubeId   String   @unique
  thumbnail   String?
  duration    String?
  views       Int      @default(0)
  published   Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("videos")
}

model SeoSettings {
  id              String @id @default(cuid())
  siteTitle       String
  siteDescription String
  siteKeywords    String
  canonicalUrl    String
  ogTitle         String?
  ogDescription   String?
  ogImage         String?
  twitterHandle   String?
  googleAnalytics String?
  googleTagManager String?
  hotjarId        String?
  clarityId       String?
  
  @@map("seo_settings")
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  BASIC
  PRO
  ENTERPRISE
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}