// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Bloco CORRETO
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts         Post[]
  comments      Comment[]
  adminSessions AdminSession[] // ADICIONE ESTA LINHA

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  image       String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  views       Int      @default(0)
  readTime    String?
  seoTitle    String?
  seoDescription String?
  seoKeywords String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  tags        PostTag[]
  comments    Comment[]
  
  @@map("posts")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String @default("#3B82F6")
  
  posts       Post[]
  
  @@map("categories")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  color String @default("#6B7280")
  
  posts PostTag[]
  
  @@map("tags")
}

model PostTag {
  postId String
  tagId  String
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  
  @@map("comments")
}

model Member {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  plan        Plan     @default(BASIC)
  status      MemberStatus @default(ACTIVE)
  stripeId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime?
  
  @@map("members")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@map("contacts")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  youtubeId   String   @unique
  thumbnail   String?
  duration    String?
  views       Int      @default(0)
  published   Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("videos")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  longDescription String?
  price       Decimal  @db.Decimal(10,2)
  image       String?
  category    ProductCategory
  type        ProductType
  downloadUrl String?
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders      OrderItem[]
  
  @@map("products")
}

model Order {
  id          String   @id @default(cuid())
  customerName String
  customerEmail String
  total       Decimal  @db.Decimal(10,2)
  status      OrderStatus @default(PENDING)
  stripePaymentId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  items       OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  quantity  Int    @default(1)
  price     Decimal @db.Decimal(10,2)
  
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model SeoSettings {
  id              String @id @default(cuid())
  siteTitle       String
  siteDescription String
  siteKeywords    String
  canonicalUrl    String
  ogTitle         String?
  ogDescription   String?
  ogImage         String?
  twitterHandle   String?
  googleAnalytics String?
  googleTagManager String?
  hotjarId        String?
  clarityId       String?
  
  @@map("seo_settings")
}

model AdminSession {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("admin_sessions")
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  BASIC
  PRO
  ENTERPRISE
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum ProductCategory {
  TEMPLATES
  COURSES
  CONSULTATION
  EBOOKS
  SOFTWARE
  MARKETPLACE
}

enum ProductType {
  DIGITAL
  SERVICE
  PHYSICAL
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}