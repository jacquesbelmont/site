---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getTranslations } from '../../i18n/translations';

const lang = 'en';
const t = getTranslations(lang);

// Obtém as chaves de ambiente de forma segura
const API_KEY = import.meta.env.YOUTUBE_API_KEY;
const CHANNEL_ID = import.meta.env.YOUTUBE_CHANNEL_ID;

// A API do YouTube usa um ID de playlist especial para os "uploads" de um canal.
// Basta substituir o "UC" inicial do ID do canal por "UU".
const UPLOADS_PLAYLIST_ID = CHANNEL_ID ? CHANNEL_ID.replace('UC', 'UU') : null;

const YOUTUBE_API_URL = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=${UPLOADS_PLAYLIST_ID}&maxResults=12&key=${API_KEY}`;

let videos = [];
let error = null;

try {
  // Verifica se as variáveis de ambiente essenciais foram configuradas
  if (!API_KEY || !CHANNEL_ID) {
    throw new Error("As variáveis de ambiente YOUTUBE_API_KEY e YOUTUBE_CHANNEL_ID precisam de ser configuradas na Vercel.");
  }

  const response = await fetch(YOUTUBE_API_URL);
  const data = await response.json();

  if (!response.ok) {
    // Captura mensagens de erro da própria API do YouTube
    throw new Error(data.error?.message || 'Ocorreu um erro ao buscar os vídeos. Verifique a sua Chave de API.');
  }

  // Mapeia os dados da API para o formato que o seu site espera
  videos = data.items.map((item: any) => ({
    id: item.snippet.resourceId.videoId,
    title: item.snippet.title,
    description: item.snippet.description,
    thumbnail: item.snippet.thumbnails.high?.url || item.snippet.thumbnails.default?.url,
    publishedAt: new Date(item.snippet.publishedAt).toLocaleDateString('pt-BR', { year: 'numeric', month: 'long', day: 'numeric' }),
    // Nota: A duração e as visualizações não vêm desta chamada de API, teríamos de fazer chamadas adicionais.
    duration: '',
    views: ''
  }));

} catch (e) {
  console.error(e);
  error = (e as Error).message;
}
---

<BaseLayout
  title="Video Gallery - Jacques Belmont"
  description="Watch my latest YouTube videos about digital marketing, SEO, and AI optimization strategies."
>
  <section class="py-20 bg-gradient-to-br from-red-50 via-white to-pink-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <div class="flex items-center justify-center mb-6">
        <svg class="w-12 h-12 text-red-600 mr-4" fill="currentColor" viewBox="0 0 24 24">
          <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
        </svg>
        <h1 class="text-4xl lg:text-5xl font-display font-bold text-gray-900">
          Video Gallery
        </h1>
      </div>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
        Watch my latest YouTube videos about digital marketing strategies, SEO tips, and AI optimization
      </p>
      <a
        href="https://youtube.com/@jacquesbelmont"
        target="_blank"
        rel="noopener noreferrer"
        class="inline-flex items-center px-8 py-4 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 transform hover:-translate-y-1 transition-all duration-300 shadow-lg hover:shadow-xl"
      >
        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
          <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
        </svg>
        Subscribe to Channel
      </a>
    </div>
  </section>

  <section class="py-16 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-display font-bold text-gray-900 mb-4">Latest Videos</h2>
        <p class="text-gray-600">Explore my complete video library</p>
      </div>

      {error ? (
        <div class="text-center text-red-600 bg-red-100 p-6 rounded-lg shadow-md">
          <h3 class="font-bold text-lg mb-2">Oops! Algo correu mal ao buscar os vídeos.</h3>
          <p class="text-sm">{error}</p>
          <p class="text-xs mt-4">Por favor, verifique se as variáveis de ambiente `YOUTUBE_API_KEY` e `YOUTUBE_CHANNEL_ID` estão configuradas corretamente no painel da Vercel.</p>
        </div>
      ) : (
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {videos.map((video) => (
            <div class="bg-white rounded-2xl shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 overflow-hidden group">
              <div class="relative aspect-video overflow-hidden">
                <img
                  src={video.thumbnail}
                  alt={video.title}
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                  loading="lazy"
                />
                <div class="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <button
                    class="w-16 h-16 bg-red-600 rounded-full flex items-center justify-center text-white hover:bg-red-700 transform hover:scale-110 transition-all duration-200"
                    onclick={`openVideoModal('${video.id}')`}
                  >
                    <svg class="w-6 h-6 ml-1" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </button>
                </div>
              </div>

              <div class="p-6">
                <h3 class="text-lg font-display font-semibold text-gray-900 mb-2 line-clamp-2" title={video.title}>
                  {video.title}
                </h3>
                <div class="flex items-center justify-between text-sm text-gray-500">
                  <span>Publicado em: {video.publishedAt}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  </section>

  <div id="video-modal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
      <div class="flex items-center justify-between p-4 border-b">
        <h3 class="text-lg font-semibold">Video Player</h3>
        <button
          onclick="closeVideoModal()"
          class="text-gray-500 hover:text-gray-700 p-2"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
       </div>
      <div class="aspect-video">
        <iframe
          id="modal-video"
          src=""
          class="w-full h-full"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen
        ></iframe>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  function openVideoModal(videoId) {
    const modal = document.getElementById('video-modal');
    const iframe = document.getElementById('modal-video');
    iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  function closeVideoModal() {
    const modal = document.getElementById('video-modal');
    const iframe = document.getElementById('modal-video');
    iframe.src = '';
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
  }

  // Close modal on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeVideoModal();
    }
  });

  // Close modal on backdrop click
  document.getElementById('video-modal')?.addEventListener('click', (e) => {
    if (e.target === e.currentTarget) {
      closeVideoModal();
    }
  });
</script>