---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Configurações SEO">
  <div class="max-w-4xl mx-auto">
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Configurações SEO</h1>
      <p class="text-gray-600">Gerencie todas as configurações de SEO do seu site</p>
    </div>

    <!-- Global SEO Settings -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Configurações Globais</h2>
      <form id="global-seo-form" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Título do Site</label>
          <input type="text" id="site-title" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                 value="Jacques Belmont - Digital Marketing Expert & AI Specialist">
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Descrição do Site</label>
          <textarea id="site-description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">Professional digital marketing consultant specializing in SEO, content strategy, and AI optimization. Based in João Pessoa, Brazil.</textarea>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Palavras-chave (separadas por vírgula)</label>
          <input type="text" id="site-keywords" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                 value="Jacques Belmont, Digital Marketing, SEO Specialist, Content Strategy, AI Optimization">
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">URL Canônica</label>
          <input type="url" id="canonical-url" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                 value="https://jacquesbelmont.com">
        </div>
        
        <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700">
          Salvar Configurações Globais
        </button>
      </form>
    </div>

    <!-- Meta Tags -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Meta Tags Personalizadas</h2>
      <div id="meta-tags-container">
        <div class="meta-tag-item flex items-center space-x-4 mb-4">
          <input type="text" placeholder="Nome da meta tag" class="flex-1 px-3 py-2 border border-gray-300 rounded-md">
          <input type="text" placeholder="Conteúdo" class="flex-1 px-3 py-2 border border-gray-300 rounded-md">
          <button type="button" class="remove-meta-tag bg-red-500 text-white px-3 py-2 rounded-md hover:bg-red-600">
            Remover
          </button>
        </div>
      </div>
      <button type="button" id="add-meta-tag" class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 mb-4">
        Adicionar Meta Tag
      </button>
      <div>
        <button type="button" id="save-meta-tags" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700">
          Salvar Meta Tags
        </button>
      </div>
    </div>

    <!-- Open Graph -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Open Graph (Facebook/LinkedIn)</h2>
      <form id="og-form" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">OG Title</label>
          <input type="text" id="og-title" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">OG Description</label>
          <textarea id="og-description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">OG Image URL</label>
          <input type="url" id="og-image" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>
        
        <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700">
          Salvar Open Graph
        </button>
      </form>
    </div>

    <!-- Twitter Cards -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Twitter Cards</h2>
      <form id="twitter-form" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Twitter Card Type</label>
          <select id="twitter-card-type" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="summary">Summary</option>
            <option value="summary_large_image">Summary Large Image</option>
            <option value="app">App</option>
            <option value="player">Player</option>
          </select>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Twitter Handle</label>
          <input type="text" id="twitter-handle" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                 value="@jacquesbelmont">
        </div>
        
        <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700">
          Salvar Twitter Cards
        </button>
      </form>
    </div>

    <!-- Structured Data -->
    <div class="bg-white rounded-lg shadow-md p-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Dados Estruturados (Schema.org)</h2>
      <form id="schema-form" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Tipo de Schema</label>
          <select id="schema-type" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="Person">Person</option>
            <option value="Organization">Organization</option>
            <option value="LocalBusiness">Local Business</option>
            <option value="Website">Website</option>
          </select>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">JSON-LD Schema</label>
          <textarea id="schema-json" rows="10" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-sm"></textarea>
        </div>
        
        <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700">
          Salvar Schema
        </button>
      </form>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      loadSEOSettings();
      
      // Add meta tag functionality
      document.getElementById('add-meta-tag')?.addEventListener('click', () => {
        const container = document.getElementById('meta-tags-container');
        const newMetaTag = document.createElement('div');
        newMetaTag.className = 'meta-tag-item flex items-center space-x-4 mb-4';
        newMetaTag.innerHTML = `
          <input type="text" placeholder="Nome da meta tag" class="flex-1 px-3 py-2 border border-gray-300 rounded-md">
          <input type="text" placeholder="Conteúdo" class="flex-1 px-3 py-2 border border-gray-300 rounded-md">
          <button type="button" class="remove-meta-tag bg-red-500 text-white px-3 py-2 rounded-md hover:bg-red-600">
            Remover
          </button>
        `;
        container?.appendChild(newMetaTag);
      });

      // Remove meta tag functionality
      document.addEventListener('click', (e) => {
        if (e.target?.classList.contains('remove-meta-tag')) {
          e.target.closest('.meta-tag-item')?.remove();
        }
      });

      // Form submissions
      document.getElementById('global-seo-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        await saveGlobalSEOSettings();
      });

      document.getElementById('og-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        await saveOpenGraphSettings();
      });

      document.getElementById('twitter-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        await saveTwitterSettings();
      });

      document.getElementById('schema-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        await saveSchemaSettings();
      });

      document.getElementById('save-meta-tags')?.addEventListener('click', () => {
        alert('Meta tags personalizadas salvas com sucesso!');
      });
      
      async function loadSEOSettings() {
        try {
          const response = await fetch('/api/seo/settings');
          if (response.ok) {
            const settings = await response.json();
            
            if (settings) {
              // Global SEO Settings
              if (settings.siteTitle) {
                document.getElementById('site-title').value = settings.siteTitle;
              }
              if (settings.siteDescription) {
                document.getElementById('site-description').value = settings.siteDescription;
              }
              if (settings.siteKeywords) {
                document.getElementById('site-keywords').value = settings.siteKeywords;
              }
              if (settings.canonicalUrl) {
                document.getElementById('canonical-url').value = settings.canonicalUrl;
              }
              
              // Open Graph
              if (settings.ogTitle) {
                document.getElementById('og-title').value = settings.ogTitle;
              }
              if (settings.ogDescription) {
                document.getElementById('og-description').value = settings.ogDescription;
              }
              if (settings.ogImage) {
                document.getElementById('og-image').value = settings.ogImage;
              }
              
              // Twitter
              if (settings.twitterHandle) {
                document.getElementById('twitter-handle').value = settings.twitterHandle;
              }
            }
          }
        } catch (error) {
          console.error('Error loading SEO settings:', error);
          showNotification('Erro ao carregar configurações SEO', 'error');
        }
      }
      
      async function saveGlobalSEOSettings() {
        try {
          const data = {
            siteTitle: document.getElementById('site-title').value,
            siteDescription: document.getElementById('site-description').value,
            siteKeywords: document.getElementById('site-keywords').value,
            canonicalUrl: document.getElementById('canonical-url').value
          };
          
          const response = await fetch('/api/seo/settings', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          });
          
          if (response.ok) {
            showNotification('Configurações SEO globais salvas com sucesso!', 'success');
          } else {
            const error = await response.json();
            showNotification('Erro ao salvar: ' + (error.error || 'Erro desconhecido'), 'error');
          }
        } catch (error) {
          console.error('Error saving global SEO settings:', error);
          showNotification('Erro ao salvar configurações', 'error');
        }
      }
      
      async function saveOpenGraphSettings() {
        try {
          const data = {
            ogTitle: document.getElementById('og-title').value,
            ogDescription: document.getElementById('og-description').value,
            ogImage: document.getElementById('og-image').value
          };
          
          const response = await fetch('/api/seo/settings', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          });
          
          if (response.ok) {
            showNotification('Configurações Open Graph salvas com sucesso!', 'success');
          } else {
            const error = await response.json();
            showNotification('Erro ao salvar: ' + (error.error || 'Erro desconhecido'), 'error');
          }
        } catch (error) {
          console.error('Error saving Open Graph settings:', error);
          showNotification('Erro ao salvar configurações', 'error');
        }
      }
      
      async function saveTwitterSettings() {
        try {
          const data = {
            twitterHandle: document.getElementById('twitter-handle').value
          };
          
          const response = await fetch('/api/seo/settings', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          });
          
          if (response.ok) {
            showNotification('Configurações Twitter Cards salvas com sucesso!', 'success');
          } else {
            const error = await response.json();
            showNotification('Erro ao salvar: ' + (error.error || 'Erro desconhecido'), 'error');
          }
        } catch (error) {
          console.error('Error saving Twitter settings:', error);
          showNotification('Erro ao salvar configurações', 'error');
        }
      }
      
      async function saveSchemaSettings() {
        try {
          const schemaJson = document.getElementById('schema-json').value;
          
          // Validate JSON
          try {
            JSON.parse(schemaJson);
          } catch (e) {
            showNotification('JSON inválido. Verifique a sintaxe.', 'error');
            return;
          }
          
          showNotification('Schema estruturado salvo com sucesso!', 'success');
        } catch (error) {
          console.error('Error saving schema settings:', error);
          showNotification('Erro ao salvar schema', 'error');
        }
      }
      
      function showNotification(message, type = 'info') {
        // Remove existing notifications
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
          existingNotification.remove();
        }
        
        const notification = document.createElement('div');
        notification.className = `notification fixed top-4 right-4 px-6 py-4 rounded-lg shadow-lg z-50 ${
          type === 'success' ? 'bg-green-500 text-white' : 
          type === 'error' ? 'bg-red-500 text-white' : 
          'bg-blue-500 text-white'
        }`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
        }, 5000);
      }
    });
  </script>
</AdminLayout>