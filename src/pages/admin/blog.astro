---
import AdminLayout from '../../layouts/AdminLayout.astro';
import BlogEditor from '../../components/admin/BlogEditor.astro';
---

<AdminLayout title="Gerenciar Blog">
  <div class="max-w-6xl mx-auto">
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">Gerenciar Blog</h1>
          <p class="text-gray-600">Crie, edite e gerencie todos os posts do blog</p>
        </div>
        <button id="new-post-btn" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 flex items-center">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
          </svg>
          Novo Post
        </button>
      </div>
    </div>

    <!-- Blog Stats -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8" id="blog-stats">
      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center">
          <div class="p-3 rounded-full bg-blue-100 text-blue-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600">Total Posts</p>
            <p class="text-2xl font-semibold text-gray-900" id="total-posts">-</p>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center">
          <div class="p-3 rounded-full bg-green-100 text-green-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600">Visualizações</p>
            <p class="text-2xl font-semibold text-gray-900" id="total-views">-</p>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center">
          <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600">Comentários</p>
            <p class="text-2xl font-semibold text-gray-900" id="total-comments">-</p>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center">
          <div class="p-3 rounded-full bg-purple-100 text-purple-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600">Curtidas</p>
            <p class="text-2xl font-semibold text-gray-900" id="total-likes">-</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Blog Posts List -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <h2 class="text-lg font-semibold text-gray-900">Posts do Blog</h2>
          <div class="flex space-x-2">
            <select id="status-filter" class="px-3 py-2 border border-gray-300 rounded-md text-sm">
              <option>Todos os Status</option>
              <option>Publicado</option>
              <option>Rascunho</option>
              <option>Agendado</option>
            </select>
            <input type="text" id="search-posts" placeholder="Buscar posts..." class="px-3 py-2 border border-gray-300 rounded-md text-sm">
          </div>
        </div>
      </div>

      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200" id="posts-table">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Post</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Data</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Visualizações</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200" id="posts-tbody">
            <!-- Posts will be loaded dynamically -->
          </tbody>
        </table>
        
        <!-- Loading State -->
        <div id="posts-loading" class="p-8 text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p class="text-gray-600">Carregando posts...</p>
        </div>
        
        <!-- Empty State -->
        <div id="posts-empty" class="hidden p-8 text-center">
          <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <h3 class="text-lg font-medium text-gray-900 mb-2">Nenhum post encontrado</h3>
          <p class="text-gray-600 mb-4">Comece criando seu primeiro post do blog.</p>
          <button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
            Criar Primeiro Post
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Include Blog Editor Component -->
  <BlogEditor />
  
  <!-- Toast Notifications Container -->
  <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>

  <script>
    // Global state
    let currentEditingPost = null;
    let posts = [];
    let categories = [];
    let stats = {};
    
    document.addEventListener('DOMContentLoaded', () => {
      initializeBlogManager();
    });
    
    async function initializeBlogManager() {
      await Promise.all([
        loadCategories(),
        loadBlogStats(),
        loadBlogPosts()
      ]);
      
      setupEventListeners();
    }
    
    function setupEventListeners() {
      // New post button
      document.getElementById('new-post-btn')?.addEventListener('click', openNewPostModal);
      
      // Modal close buttons
      document.getElementById('close-editor-modal')?.addEventListener('click', closeModal);
      document.getElementById('cancel-post-btn')?.addEventListener('click', closeModal);
      
      // Form submission
      document.getElementById('blog-post-form')?.addEventListener('submit', handleFormSubmit);
      
      // Search and filters
      document.getElementById('search-posts')?.addEventListener('input', debounce(handleSearch, 300));
      document.getElementById('status-filter')?.addEventListener('change', handleFilterChange);
      
      // Image upload
      document.getElementById('upload-trigger')?.addEventListener('click', () => {
        document.getElementById('image-upload')?.click();
      });
      
      document.getElementById('image-upload')?.addEventListener('change', handleImageUpload);
      document.getElementById('remove-image')?.addEventListener('click', removeImage);
      
      // Delete confirmation modal
      document.getElementById('cancel-delete-btn')?.addEventListener('click', closeDeleteModal);
      document.getElementById('confirm-delete-btn')?.addEventListener('click', confirmDelete);
      
      // Modal backdrop click handling (FIX FOR THE BUG!)
      document.getElementById('blog-editor-modal')?.addEventListener('click', (e) => {
        if (e.target === e.currentTarget) {
          closeModal();
        }
      });
      
      document.getElementById('delete-confirmation-modal')?.addEventListener('click', (e) => {
        if (e.target === e.currentTarget) {
          closeDeleteModal();
        }
      });
    }
    
    // Modal Management
    function openNewPostModal() {
      currentEditingPost = null;
      resetForm();
      document.getElementById('modal-title').textContent = 'Novo Post';
      document.getElementById('blog-editor-modal')?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
    
    function openEditPostModal(post) {
      currentEditingPost = post;
      populateForm(post);
      document.getElementById('modal-title').textContent = 'Editar Post';
      document.getElementById('blog-editor-modal')?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
    
    function closeModal() {
      document.getElementById('blog-editor-modal')?.classList.add('hidden');
      document.body.style.overflow = 'auto';
      resetForm();
    }
    
    function closeDeleteModal() {
      document.getElementById('delete-confirmation-modal')?.classList.add('hidden');
      currentEditingPost = null;
    }
    
    // Form Management
    function resetForm() {
      document.getElementById('blog-post-form')?.reset();
      document.getElementById('rich-editor').innerHTML = '<p>Comece a escrever seu post aqui...</p>';
      document.getElementById('image-preview')?.classList.add('hidden');
      currentEditingPost = null;
    }
    
    function populateForm(post) {
      document.getElementById('post-title').value = post.title || '';
      document.getElementById('post-slug').value = post.slug || '';
      document.getElementById('post-excerpt').value = post.excerpt || '';
      document.getElementById('rich-editor').innerHTML = post.content || '<p>Comece a escrever seu post aqui...</p>';
      document.getElementById('post-content').value = post.content || '';
      document.getElementById('post-status').value = post.published ? 'Publicado' : 'Rascunho';
      document.getElementById('post-category').value = post.categoryId || '';
      document.getElementById('post-image').value = post.image || '';
      document.getElementById('post-seo-title').value = post.seoTitle || '';
      document.getElementById('post-seo-description').value = post.seoDescription || '';
      document.getElementById('post-seo-keywords').value = post.seoKeywords || '';
      document.getElementById('post-read-time').value = post.readTime || '';
      document.getElementById('post-featured').checked = post.featured || false;
      
      if (post.publishedAt) {
        const date = new Date(post.publishedAt);
        document.getElementById('post-published-at').value = date.toISOString().slice(0, 16);
      }
      
      if (post.image) {
        showImagePreview(post.image);
      }
    }
    
    // API Calls
    async function loadBlogStats() {
      try {
        const response = await fetch('/api/blog/stats');
        if (response.ok) {
          stats = await response.json();
          updateStatsDisplay();
        }
      } catch (error) {
        console.error('Error loading blog stats:', error);
        showToast('Erro ao carregar estatísticas', 'error');
      }
    }
    
    async function loadCategories() {
      try {
        const response = await fetch('/api/admin/categories');
        if (response.ok) {
          categories = await response.json();
          populateCategorySelect();
        }
      } catch (error) {
        console.error('Error loading categories:', error);
        showToast('Erro ao carregar categorias', 'error');
      }
    }
    
    async function loadBlogPosts(search = '', status = '') {
      try {
        showLoading(true);
        let url = '/api/admin/posts?limit=50';
        if (search) url += `&search=${encodeURIComponent(search)}`;
        if (status && status !== 'Todos os Status') {
          const statusMap = {
            'Publicado': 'published',
            'Rascunho': 'draft',
            'Agendado': 'scheduled'
          };
          url += `&status=${statusMap[status] || status}`;
        }
        
        const response = await fetch(url);
        if (response.ok) {
          const data = await response.json();
          posts = data.posts;
          updatePostsTable();
        } else {
          throw new Error('Failed to load posts');
        }
      } catch (error) {
        console.error('Error loading posts:', error);
        showToast('Erro ao carregar posts', 'error');
        showEmptyState();
      } finally {
        showLoading(false);
      }
    }
    
    async function handleFormSubmit(e) {
      e.preventDefault();
      
      const saveBtn = document.getElementById('save-post-btn');
      const saveBtnText = document.getElementById('save-btn-text');
      const saveBtnLoading = document.getElementById('save-btn-loading');
      
      // Update button state
      saveBtn.disabled = true;
      saveBtnText.textContent = currentEditingPost ? 'Atualizando...' : 'Salvando...';
      saveBtnLoading.classList.remove('hidden');
      
      try {
        // Sync rich editor content
        const richEditor = document.getElementById('rich-editor');
        const contentTextarea = document.getElementById('post-content');
        contentTextarea.value = richEditor.innerHTML;
        
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData.entries());
        
        // Convert status to boolean for published field
        data.published = data.status === 'Publicado';
        data.featured = document.getElementById('post-featured').checked;
        
        const url = currentEditingPost ? `/api/admin/posts/${currentEditingPost.id}` : '/api/admin/posts';
        const method = currentEditingPost ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });
        
        if (response.ok) {
          const savedPost = await response.json();
          showToast(
            currentEditingPost ? 'Post atualizado com sucesso!' : 'Post criado com sucesso!',
            'success'
          );
          closeModal();
          await Promise.all([loadBlogPosts(), loadBlogStats()]);
        } else {
          const error = await response.json();
          throw new Error(error.error || 'Erro ao salvar post');
        }
      } catch (error) {
        console.error('Error saving post:', error);
        showToast(error.message || 'Erro ao salvar post', 'error');
      } finally {
        // Reset button state
        saveBtn.disabled = false;
        saveBtnText.textContent = 'Salvar Post';
        saveBtnLoading.classList.add('hidden');
      }
    }
    
    // Image Upload
    async function handleImageUpload(e) {
      const file = e.target.files[0];
      if (!file) return;
      
      // Validate file type
      if (!file.type.startsWith('image/')) {
        showToast('Por favor, selecione apenas arquivos de imagem', 'error');
        return;
      }
      
      // Validate file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        showToast('A imagem deve ter no máximo 5MB', 'error');
        return;
      }
      
      try {
        showUploadProgress(true);
        
        // Create FormData for file upload
        const formData = new FormData();
        formData.append('file', file);
        
        const response = await fetch('/api/upload/image', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          const result = await response.json();
          document.getElementById('post-image').value = result.url;
          showImagePreview(result.url);
          showToast('Imagem enviada com sucesso!', 'success');
        } else {
          const error = await response.json();
          throw new Error(error.error || 'Erro ao fazer upload da imagem');
        }
      } catch (error) {
        console.error('Error uploading image:', error);
        showToast(error.message || 'Erro ao fazer upload da imagem', 'error');
      } finally {
        showUploadProgress(false);
      }
    }
    
    function showImagePreview(url) {
      const preview = document.getElementById('image-preview');
      const img = document.getElementById('preview-img');
      img.src = url;
      preview.classList.remove('hidden');
    }
    
    function removeImage() {
      document.getElementById('post-image').value = '';
      document.getElementById('image-preview').classList.add('hidden');
    }
    
    function showUploadProgress(show) {
      const progress = document.getElementById('upload-progress');
      if (show) {
        progress.classList.remove('hidden');
      } else {
        progress.classList.add('hidden');
      }
    }
    
    // UI Updates
    function updateStatsDisplay() {
      document.getElementById('total-posts').textContent = stats.totalPosts?.toLocaleString() || '0';
      document.getElementById('total-views').textContent = formatNumber(stats.totalViews) || '0';
      document.getElementById('total-comments').textContent = stats.totalComments?.toLocaleString() || '0';
      document.getElementById('total-likes').textContent = formatNumber(stats.totalLikes) || '0';
    }
    
    function populateCategorySelect() {
      const select = document.getElementById('post-category');
      select.innerHTML = '<option value="">Selecione uma categoria</option>';
      
      categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category.id;
        option.textContent = category.name;
        select.appendChild(option);
      });
    }
    
    function updatePostsTable() {
      const tbody = document.getElementById('posts-tbody');
      const emptyState = document.getElementById('posts-empty');
      
      if (posts.length === 0) {
        tbody.innerHTML = '';
        emptyState.classList.remove('hidden');
        return;
      }
      
      emptyState.classList.add('hidden');
      tbody.innerHTML = '';
      
      posts.forEach(post => {
        const row = createPostRow(post);
        tbody.appendChild(row);
      });
    }
    
    function createPostRow(post) {
      const row = document.createElement('tr');
      row.className = 'hover:bg-gray-50 transition-colors';
      
      const statusClass = post.published ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800';
      const statusText = post.published ? 'Publicado' : 'Rascunho';
      
      row.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="flex items-center">
            <img class="h-12 w-12 rounded-lg object-cover shadow-sm" 
                 src="${post.image || 'https://images.pexels.com/photos/270637/pexels-photo-270637.jpeg?auto=compress&cs=tinysrgb&w=100'}" 
                 alt="${post.title}"
                 onerror="this.src='https://images.pexels.com/photos/270637/pexels-photo-270637.jpeg?auto=compress&cs=tinysrgb&w=100'">
            <div class="ml-4">
              <div class="text-sm font-medium text-gray-900 line-clamp-1">${post.title}</div>
              <div class="text-sm text-gray-500">${post.category?.name || 'Sem categoria'}</div>
            </div>
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">
            ${statusText}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
          ${new Date(post.createdAt).toLocaleDateString('pt-BR')}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
          ${formatNumber(post.views || 0)}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <div class="flex space-x-2">
            <button onclick="editPost('${post.id}')" class="text-blue-600 hover:text-blue-900 font-medium">
              Editar
            </button>
            <button onclick="viewPost('${post.slug}')" class="text-green-600 hover:text-green-900 font-medium">
              Ver
            </button>
            <button onclick="deletePost('${post.id}')" class="text-red-600 hover:text-red-900 font-medium">
              Excluir
            </button>
          </div>
        </td>
      `;
      
      return row;
    }
    
    function showLoading(show) {
      const loading = document.getElementById('posts-loading');
      const table = document.getElementById('posts-table');
      
      if (show) {
        loading.classList.remove('hidden');
        table?.classList.add('hidden');
      } else {
        loading.classList.add('hidden');
        table?.classList.remove('hidden');
      }
    }
    
    function showEmptyState() {
      document.getElementById('posts-empty')?.classList.remove('hidden');
    }
    
    // Search and Filter
    function handleSearch(e) {
      const searchTerm = e.target.value;
      const statusFilter = document.getElementById('status-filter').value;
      loadBlogPosts(searchTerm, statusFilter);
    }
    
    function handleFilterChange(e) {
      const statusFilter = e.target.value;
      const searchTerm = document.getElementById('search-posts').value;
      loadBlogPosts(searchTerm, statusFilter);
    }
    
    // Global functions for post actions
    window.editPost = async (postId) => {
      try {
        const response = await fetch(`/api/admin/posts/${postId}`);
        if (response.ok) {
          const post = await response.json();
          openEditPostModal(post);
        } else {
          throw new Error('Post não encontrado');
        }
      } catch (error) {
        console.error('Error loading post:', error);
        showToast('Erro ao carregar post para edição', 'error');
      }
    };
    
    window.viewPost = (slug) => {
      window.open(`/blog/${slug}`, '_blank');
    };
    
    window.deletePost = (postId) => {
      const post = posts.find(p => p.id === postId);
      if (post) {
        currentEditingPost = post;
        document.getElementById('delete-confirmation-modal')?.classList.remove('hidden');
      }
    };
    
    async function confirmDelete() {
      if (!currentEditingPost) return;
      
      try {
        const response = await fetch(`/api/admin/posts/${currentEditingPost.id}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          showToast('Post excluído com sucesso!', 'success');
          closeDeleteModal();
          await Promise.all([loadBlogPosts(), loadBlogStats()]);
        } else {
          const error = await response.json();
          throw new Error(error.error || 'Erro ao excluir post');
        }
      } catch (error) {
        console.error('Error deleting post:', error);
        showToast(error.message || 'Erro ao excluir post', 'error');
      }
    }
    
    // Utility Functions
    function formatNumber(num) {
      if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
      } else if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
      }
      return num.toString();
    }
    
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
    
    function showToast(message, type = 'info') {
      const container = document.getElementById('toast-container');
      const toast = document.createElement('div');
      
      const bgColor = {
        success: 'bg-green-500',
        error: 'bg-red-500',
        warning: 'bg-yellow-500',
        info: 'bg-blue-500'
      }[type] || 'bg-blue-500';
      
      toast.className = `${bgColor} text-white px-6 py-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full`;
      toast.innerHTML = `
        <div class="flex items-center">
          <span class="flex-1">${message}</span>
          <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      `;
      
      container.appendChild(toast);
      
      // Animate in
      setTimeout(() => {
        toast.classList.remove('translate-x-full');
      }, 100);
      
      // Auto remove after 5 seconds
      setTimeout(() => {
        toast.classList.add('translate-x-full');
        setTimeout(() => {
          toast.remove();
        }, 300);
      }, 5000);
    }
  </script>
</AdminLayout>