---
import { getTranslations } from '../i18n/translations';
import { SITE_CONFIG } from '../config/site';

interface Props {
  lang: string;
}

const { lang } = Astro.props;
const t = getTranslations(lang);
---

<section id="contact" class="py-20 bg-white">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="text-4xl lg:text-5xl font-display font-bold text-gray-900 mb-4">
        {t.contact.title}
      </h2>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto">
        {t.contact.subtitle}
      </p>
    </div>

    <div class="grid lg:grid-cols-2 gap-12">
      <div class="bg-gray-50 rounded-2xl p-8">
        <form class="space-y-6" id="contact-form">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
              {t.contact.name}
            </label>
            <input
              type="text"
              id="name"
              name="name"
              required
              autocomplete="name"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="Your Name"
            />
          </div>

          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
              {t.contact.email}
            </label>
            <input
              type="email"
              id="email"
              name="email"
              required
              autocomplete="email"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="your@email.com"
            />
          </div>

          <div>
            <label for="subject" class="block text-sm font-medium text-gray-700 mb-2">
              {t.contact.subject}
            </label>
            <input
              type="text"
              id="subject"
              name="subject"
              required
              autocomplete="off"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="Project Subject"
            />
          </div>

          <div>
            <label for="message" class="block text-sm font-medium text-gray-700 mb-2">
              {t.contact.message}
            </label>
            <textarea
              id="message"
              name="message"
              rows="5"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="Tell me about your project..."
            ></textarea>
          </div>

          <button
            type="submit"
            class="w-full bg-gradient-to-r from-primary-600 to-secondary-600 text-white px-8 py-4 rounded-lg font-semibold hover:from-primary-700 hover:to-secondary-700 transform hover:-translate-y-1 transition-all duration-300 shadow-lg hover:shadow-xl"
          >
            {t.contact.send}
          </button>
        </form>
      </div>

      <div class="space-y-8">
        {/* ... O seu código de informações de contacto permanece o mesmo ... */}
      </div>
    </div>
  </div>
</section>

<div id="success-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white rounded-2xl shadow-2xl max-w-sm w-full mx-auto text-center p-8 transform transition-all scale-95 opacity-0" id="success-modal-content">
    <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-6">
      <svg class="h-10 w-10 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
      </svg>
    </div>
    <h3 class="text-2xl font-display font-semibold text-gray-900 mb-3">Mensagem Enviada!</h3>
    <p class="text-gray-600 mb-6">Obrigado pelo seu contacto. Irei responder assim que possível.</p>
    <button id="close-modal-btn" class="w-full bg-green-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors">
      Fechar
    </button>
  </div>
</div>


<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form');
    const successModal = document.getElementById('success-modal');
    const successModalContent = document.getElementById('success-modal-content');
    const closeModalBtn = document.getElementById('close-modal-btn');

    function showSuccessModal() {
      successModal.classList.remove('hidden');
      setTimeout(() => {
        successModalContent.classList.remove('opacity-0', 'scale-95');
        successModalContent.classList.add('opacity-100', 'scale-100');
      }, 10);
    }

    function hideSuccessModal() {
      successModalContent.classList.add('opacity-0', 'scale-95');
      setTimeout(() => {
        successModal.classList.add('hidden');
      }, 300); // Espera a transição terminar
    }

    closeModalBtn.addEventListener('click', hideSuccessModal);
    successModal.addEventListener('click', (e) => {
        if (e.target === successModal) {
            hideSuccessModal();
        }
    });

    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitButton = form.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.textContent;
        submitButton.disabled = true;
        submitButton.textContent = 'A Enviar...';

        const data = {
          name: form.name.value,
          email: form.email.value,
          subject: form.subject.value,
          message: form.message.value,
        };

        try {
          const response = await fetch('/api/contact', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });

          if (response.ok) {
            form.reset();
            showSuccessModal();
          } else {
            const errorData = await response.json();
            alert(`Erro: ${errorData.error || 'Não foi possível enviar a mensagem.'}`);
          }
        } catch (error) {
          console.error('Submission error:', error);
          alert('Ocorreu um erro inesperado. Por favor, tente novamente mais tarde.');
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = originalButtonText;
        }
      });
    }
  });
</script>