---
import LanguageSelector from './LanguageSelector.astro';
import { getTranslations } from '../i18n/translations';

interface Props {
  lang: string;
  currentPath: string;
}

const { lang, currentPath } = Astro.props;
const t = getTranslations(lang);
---

<nav class="fixed top-0 w-full bg-white/80 backdrop-blur-md border-b border-gray-200 z-50" id="navbar">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href={lang === 'en' ? '/' : `/${lang}/`} class="text-2xl font-display font-bold text-primary-600">
          Jacques Belmont
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-4">
          <a href={lang === 'en' ? '/' : `/${lang}/`} class="nav-link">{t.nav.home}</a>
          <a href={lang === 'en' ? '/#about' : `/${lang}/#about`} class="nav-link">{t.nav.about}</a>
          <a href={lang === 'en' ? '/#services' : `/${lang}/#services`} class="nav-link">{t.nav.services}</a>
          <a href="/blog" class="nav-link">Blog</a>
          <a href="/videos" class="nav-link">Videos</a>
          <a href="/members" class="nav-link">Members</a>
          <a href={lang === 'en' ? '/#contact' : `/${lang}/#contact`} class="nav-link">{t.nav.contact}</a>
        </div>
      </div>

      <!-- Language Selector & Mobile Menu Button -->
      <div class="flex items-center space-x-4">
        <LanguageSelector currentLang={lang} currentPath={currentPath} />
        
        <!-- Mobile menu button -->
        <div class="md:hidden">
          <button
            type="button"
            class="text-gray-700 hover:text-primary-600 focus:outline-none focus:text-primary-600"
            id="mobile-menu-button"
          >
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile Navigation -->
  <div class="md:hidden hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t border-gray-200">
      <a href={lang === 'en' ? '/' : `/${lang}/`} class="mobile-nav-link">{t.nav.home}</a>
      <a href={lang === 'en' ? '/#about' : `/${lang}/#about`} class="mobile-nav-link">{t.nav.about}</a>
      <a href={lang === 'en' ? '/#services' : `/${lang}/#services`} class="mobile-nav-link">{t.nav.services}</a>
      <a href="/blog" class="mobile-nav-link">Blog</a>
      <a href="/videos" class="mobile-nav-link">Videos</a>
      <a href="/members" class="mobile-nav-link">Members</a>
      <a href={lang === 'en' ? '/#contact' : `/${lang}/#contact`} class="mobile-nav-link">{t.nav.contact}</a>
    </div>
  </div>
</nav>

<style>
  .nav-link {
    @apply text-gray-700 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200;
  }
  
  .nav-link.active {
    @apply text-primary-600 bg-primary-50;
  }
  
  .mobile-nav-link {
    @apply text-gray-700 hover:text-primary-600 hover:bg-gray-50 block px-3 py-2 rounded-md text-base font-medium;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }

    // Close mobile menu when clicking outside
    document.addEventListener('click', (event) => {
      if (mobileMenu && mobileMenuButton && 
          !mobileMenu.contains(event.target as Node) && 
          !mobileMenuButton.contains(event.target as Node)) {
        mobileMenu.classList.add('hidden');
      }
    });

    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });

    // Navbar background on scroll
    window.addEventListener('scroll', () => {
      const navbar = document.getElementById('navbar');
      if (window.scrollY > 50) {
        navbar?.classList.add('bg-white/95');
        navbar?.classList.remove('bg-white/80');
      } else {
        navbar?.classList.add('bg-white/80');
        navbar?.classList.remove('bg-white/95');
      }
    });
  });
</script>