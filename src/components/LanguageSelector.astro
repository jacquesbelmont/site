---
import { languages } from '../utils/i18n';
import { SITE_CONFIG } from '../config/site';

interface Props {
  currentLang: string;
  currentPath: string;
}

const { currentLang, currentPath } = Astro.props;
---

<div class="relative inline-block text-left language-selector">
  <button
    type="button"
    class="inline-flex items-center justify-center w-full px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
    id="language-menu"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="mr-2">
      {SITE_CONFIG.languages.supported.find(l => l.code === currentLang)?.flag}
    </span>
    {SITE_CONFIG.languages.supported.find(l => l.code === currentLang)?.name}
    <svg class="-mr-1 ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </button>

  <div
    class="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden"
    id="language-dropdown"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu"
  >
    <div class="py-1" role="none">
      {SITE_CONFIG.languages.supported.map((lang) => {
        const href = lang.code === 'en' ? currentPath : `/${lang.code}${currentPath}`;
        return (
          <a
            href={href}
            class={`block px-4 py-2 text-sm hover:bg-gray-100 ${
              currentLang === lang.code ? 'bg-primary-50 text-primary-700' : 'text-gray-700'
            }`}
            role="menuitem"
          >
            <span class="mr-3">{lang.flag}</span>
            {lang.name}
          </a>
        );
      })}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('language-menu');
    const dropdown = document.getElementById('language-dropdown');
    
    if (button && dropdown) {
      button.addEventListener('click', () => {
        const isHidden = dropdown.classList.contains('hidden');
        if (isHidden) {
          dropdown.classList.remove('hidden');
          button.setAttribute('aria-expanded', 'true');
        } else {
          dropdown.classList.add('hidden');
          button.setAttribute('aria-expanded', 'false');
        }
      });

      // Close on click outside
      document.addEventListener('click', (event) => {
        if (!button.contains(event.target as Node) && !dropdown.contains(event.target as Node)) {
          dropdown.classList.add('hidden');
          button.setAttribute('aria-expanded', 'false');
        }
      });
    }
  });
</script>